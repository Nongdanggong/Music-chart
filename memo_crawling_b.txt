crawling에 대한 테스트 파일은 test_crawling.py입니다. 테스트를 할 일이 생기면 먼저 crawling.py 파일을 확인해서 주석을 따라 필요한 부분의 주석을 해제하고 다른 곳에 주석을 다는 등의 과정을 거친 뒤 테스트 파일을 실행해주세요.

app.py ->  디자인과 연관된 부분이 많으므로 뒷파트 여러분들이 html 파일을 만들며 수정해주시는 것이 좋을 듯 합니다.

기본 데이터가 될 dictionary는  {곡 이름 : [순위합 / 아티스트 / 앨범 사진 url / 유튜브 url / 장르(tf-idf하기 위한 string)]} 형태입니다.

유사도 비교에서 쓰일 사이트이름_list는 이름만 _list일 뿐 string입니다.

tf-~에서 쓰일 값은 dictionary에서 장르부분 즉 value[5]입니다.

melon은 가장 먼저 쓰이게 될 함수로, melon 차트와 필요한 내용들을 크롤링 해옵니다. 
반환값이 dictionary, string 형태의 두가지 값이므로 잘 받아주세요.


bugs 에서
만약 멜론차트에 없는 내용을 크롤링 해왔을 때, img의 크기가 다를 수 있으므로 html에서 크기를 일괄적으로 맞춰주세요



### 발표 자료를 준비하실 때 각 사이트의 특징에 맞게 크롤링을 했다고 해주시면 될 거 같아요! 예를들면 지니는 페이지를 넘어가야해서 새 url을 따왔다든지 넣으실 내용이 없으면 언급하시면 될것 같습니다!

후반 html 구현할 때 순위를 순위합 그대로 표출하는 것도 괜찮을 것 같아요! 아니어도 괜찮구요 그냥 의견입니다 ㅎ..!

제가 초반에 제안했던 디자인에서 사이트를 선택하는 부분은 제외해도 될 거 같아요! 사이트가 3개밖에 없어서요 ㅠㅠㅠ vibe, 소리바다, 모모플, flo 모두 크롤링을 금지해놔서 긁어올 수가 없었어요..ㅠㅠㅠ


!!! 장르부분은 멜론에서만 추출하는 게 좋을 거 같아 다른 함수에서는 구현하지 않았습니다. 시간도 매우 많이 걸릴 뿐더러 각 사이트마다 장르 이름을 짓는 기준이 달라 통일시키기가 힘들 것 같습니다. tf~ 분석을 할 때 전체 dictionary에서 장르 부분이 없는 key 값도 있다는 것 인지해주세요!
